// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql';
import { User, Post, History, Message } from './prisma-client';
import { AuthPayload, Context } from '../types';

export type PostType = 'MEDICAL_RECORD' | 'FORUM_POST';

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsFilterPosts {
    searchString?: string | null;
  }

  export interface ArgsPost {
    id: string;
  }

  export interface ArgsListMessagesByPost {
    postId: string;
  }

  export interface ArgsListHistoriesByPost {
    postId: string;
  }

  export type MeResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | null | Promise<User | null>;
      };

  export type FeedResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Post[] | Promise<Post[]>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post[] | Promise<Post[]>;
      };

  export type FilterPostsResolver =
    | ((
        parent: undefined,
        args: ArgsFilterPosts,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Post[] | Promise<Post[]>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsFilterPosts,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post[] | Promise<Post[]>;
      };

  export type PostResolver =
    | ((
        parent: undefined,
        args: ArgsPost,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Post | null | Promise<Post | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsPost,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post | null | Promise<Post | null>;
      };

  export type ListMessagesByPostResolver =
    | ((
        parent: undefined,
        args: ArgsListMessagesByPost,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Message[] | Promise<Message[]>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsListMessagesByPost,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Message[] | Promise<Message[]>;
      };

  export type ListHistoriesByPostResolver =
    | ((
        parent: undefined,
        args: ArgsListHistoriesByPost,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => History[] | Promise<History[]>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsListHistoriesByPost,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => History[] | Promise<History[]>;
      };

  export interface Type {
    me:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => User | null | Promise<User | null>;
        };

    feed:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post[] | Promise<Post[]>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Post[] | Promise<Post[]>;
        };

    filterPosts:
      | ((
          parent: undefined,
          args: ArgsFilterPosts,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post[] | Promise<Post[]>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsFilterPosts,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Post[] | Promise<Post[]>;
        };

    post:
      | ((
          parent: undefined,
          args: ArgsPost,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post | null | Promise<Post | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsPost,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Post | null | Promise<Post | null>;
        };

    listMessagesByPost:
      | ((
          parent: undefined,
          args: ArgsListMessagesByPost,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Message[] | Promise<Message[]>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsListMessagesByPost,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Message[] | Promise<Message[]>;
        };

    listHistoriesByPost:
      | ((
          parent: undefined,
          args: ArgsListHistoriesByPost,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => History[] | Promise<History[]>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsListHistoriesByPost,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => History[] | Promise<History[]>;
        };
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    email: (parent: User) => parent.email,
    name: (parent: User) => (parent.name === undefined ? null : parent.name),
  };

  export type IdResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type EmailResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type NameResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | null | Promise<string | null>;
      };

  export type PostsResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Post[] | Promise<Post[]>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post[] | Promise<Post[]>;
      };

  export interface Type {
    id:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    email:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    name:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | null | Promise<string | null>;
        };

    posts:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post[] | Promise<Post[]>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Post[] | Promise<Post[]>;
        };
  }
}

export namespace PostResolvers {
  export const defaultResolvers = {
    id: (parent: Post) => parent.id,
    createdAt: (parent: Post) => parent.createdAt,
    updatedAt: (parent: Post) => parent.updatedAt,
    published: (parent: Post) => parent.published,
    type: (parent: Post) => parent.type,
    title: (parent: Post) => parent.title,
    content: (parent: Post) =>
      parent.content === undefined ? null : parent.content,
  };

  export type IdResolver =
    | ((
        parent: Post,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type CreatedAtResolver =
    | ((
        parent: Post,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type UpdatedAtResolver =
    | ((
        parent: Post,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type PublishedResolver =
    | ((
        parent: Post,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => boolean | Promise<boolean>;
      };

  export type TypeResolver =
    | ((
        parent: Post,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => PostType | Promise<PostType>)
    | {
        fragment: string;
        resolve: (
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => PostType | Promise<PostType>;
      };

  export type TitleResolver =
    | ((
        parent: Post,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type ContentResolver =
    | ((
        parent: Post,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | null | Promise<string | null>;
      };

  export type AuthorResolver =
    | ((
        parent: Post,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | Promise<User>;
      };

  export type HistoriesResolver =
    | ((
        parent: Post,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => History[] | Promise<History[]>)
    | {
        fragment: string;
        resolve: (
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => History[] | Promise<History[]>;
      };

  export type MessagesResolver =
    | ((
        parent: Post,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Message[] | Promise<Message[]>)
    | {
        fragment: string;
        resolve: (
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Message[] | Promise<Message[]>;
      };

  export interface Type {
    id:
      | ((
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Post,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    createdAt:
      | ((
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Post,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    updatedAt:
      | ((
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Post,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    published:
      | ((
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Post,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => boolean | Promise<boolean>;
        };

    type:
      | ((
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => PostType | Promise<PostType>)
      | {
          fragment: string;
          resolve: (
            parent: Post,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => PostType | Promise<PostType>;
        };

    title:
      | ((
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Post,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    content:
      | ((
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: Post,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | null | Promise<string | null>;
        };

    author:
      | ((
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: Post,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => User | Promise<User>;
        };

    histories:
      | ((
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => History[] | Promise<History[]>)
      | {
          fragment: string;
          resolve: (
            parent: Post,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => History[] | Promise<History[]>;
        };

    messages:
      | ((
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Message[] | Promise<Message[]>)
      | {
          fragment: string;
          resolve: (
            parent: Post,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Message[] | Promise<Message[]>;
        };
  }
}

export namespace HistoryResolvers {
  export const defaultResolvers = {
    id: (parent: History) => parent.id,
    createdAt: (parent: History) => parent.createdAt,
    updatedAt: (parent: History) => parent.updatedAt,
    title: (parent: History) =>
      parent.title === undefined ? null : parent.title,
    content: (parent: History) =>
      parent.content === undefined ? null : parent.content,
  };

  export type IdResolver =
    | ((
        parent: History,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: History,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type AuthorResolver =
    | ((
        parent: History,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: History,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | Promise<User>;
      };

  export type PostResolver =
    | ((
        parent: History,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Post | Promise<Post>)
    | {
        fragment: string;
        resolve: (
          parent: History,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post | Promise<Post>;
      };

  export type CreatedAtResolver =
    | ((
        parent: History,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: History,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type UpdatedAtResolver =
    | ((
        parent: History,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: History,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type TitleResolver =
    | ((
        parent: History,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: History,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | null | Promise<string | null>;
      };

  export type ContentResolver =
    | ((
        parent: History,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: History,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | null | Promise<string | null>;
      };

  export interface Type {
    id:
      | ((
          parent: History,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: History,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    author:
      | ((
          parent: History,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: History,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => User | Promise<User>;
        };

    post:
      | ((
          parent: History,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post | Promise<Post>)
      | {
          fragment: string;
          resolve: (
            parent: History,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Post | Promise<Post>;
        };

    createdAt:
      | ((
          parent: History,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: History,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    updatedAt:
      | ((
          parent: History,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: History,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    title:
      | ((
          parent: History,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: History,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | null | Promise<string | null>;
        };

    content:
      | ((
          parent: History,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: History,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | null | Promise<string | null>;
        };
  }
}

export namespace MessageResolvers {
  export const defaultResolvers = {
    id: (parent: Message) => parent.id,
    createdAt: (parent: Message) => parent.createdAt,
    updatedAt: (parent: Message) => parent.updatedAt,
    content: (parent: Message) =>
      parent.content === undefined ? null : parent.content,
  };

  export type IdResolver =
    | ((
        parent: Message,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Message,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type AuthorResolver =
    | ((
        parent: Message,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: Message,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | Promise<User>;
      };

  export type PostResolver =
    | ((
        parent: Message,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Post | Promise<Post>)
    | {
        fragment: string;
        resolve: (
          parent: Message,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post | Promise<Post>;
      };

  export type CreatedAtResolver =
    | ((
        parent: Message,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Message,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type UpdatedAtResolver =
    | ((
        parent: Message,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Message,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type ContentResolver =
    | ((
        parent: Message,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: Message,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | null | Promise<string | null>;
      };

  export interface Type {
    id:
      | ((
          parent: Message,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Message,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    author:
      | ((
          parent: Message,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: Message,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => User | Promise<User>;
        };

    post:
      | ((
          parent: Message,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post | Promise<Post>)
      | {
          fragment: string;
          resolve: (
            parent: Message,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Post | Promise<Post>;
        };

    createdAt:
      | ((
          parent: Message,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Message,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    updatedAt:
      | ((
          parent: Message,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Message,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    content:
      | ((
          parent: Message,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: Message,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | null | Promise<string | null>;
        };
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsCreateDraft {
    title: string;
    content?: string | null;
    type?: PostType | null;
  }

  export interface ArgsDeletePost {
    id: string;
  }

  export interface ArgsPublish {
    id: string;
  }

  export interface ArgsSignup {
    email: string;
    password: string;
    name?: string | null;
  }

  export interface ArgsLogin {
    email: string;
    password: string;
  }

  export interface ArgsCreateMessage {
    postId: string;
    content: string;
  }

  export interface ArgsCreateHistory {
    postId: string;
    title: string;
    content: string;
  }

  export interface ArgsDeleteHistory {
    id: string;
  }

  export type CreateDraftResolver =
    | ((
        parent: undefined,
        args: ArgsCreateDraft,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Post | Promise<Post>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreateDraft,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post | Promise<Post>;
      };

  export type DeletePostResolver =
    | ((
        parent: undefined,
        args: ArgsDeletePost,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Post | null | Promise<Post | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsDeletePost,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post | null | Promise<Post | null>;
      };

  export type PublishResolver =
    | ((
        parent: undefined,
        args: ArgsPublish,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Post | null | Promise<Post | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsPublish,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post | null | Promise<Post | null>;
      };

  export type SignupResolver =
    | ((
        parent: undefined,
        args: ArgsSignup,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => AuthPayload | Promise<AuthPayload>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsSignup,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => AuthPayload | Promise<AuthPayload>;
      };

  export type LoginResolver =
    | ((
        parent: undefined,
        args: ArgsLogin,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => AuthPayload | Promise<AuthPayload>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsLogin,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => AuthPayload | Promise<AuthPayload>;
      };

  export type CreateMessageResolver =
    | ((
        parent: undefined,
        args: ArgsCreateMessage,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Message | Promise<Message>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreateMessage,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Message | Promise<Message>;
      };

  export type CreateHistoryResolver =
    | ((
        parent: undefined,
        args: ArgsCreateHistory,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => History | Promise<History>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreateHistory,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => History | Promise<History>;
      };

  export type DeleteHistoryResolver =
    | ((
        parent: undefined,
        args: ArgsDeleteHistory,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => History | Promise<History>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsDeleteHistory,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => History | Promise<History>;
      };

  export interface Type {
    createDraft:
      | ((
          parent: undefined,
          args: ArgsCreateDraft,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post | Promise<Post>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreateDraft,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Post | Promise<Post>;
        };

    deletePost:
      | ((
          parent: undefined,
          args: ArgsDeletePost,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post | null | Promise<Post | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsDeletePost,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Post | null | Promise<Post | null>;
        };

    publish:
      | ((
          parent: undefined,
          args: ArgsPublish,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post | null | Promise<Post | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsPublish,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Post | null | Promise<Post | null>;
        };

    signup:
      | ((
          parent: undefined,
          args: ArgsSignup,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => AuthPayload | Promise<AuthPayload>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsSignup,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => AuthPayload | Promise<AuthPayload>;
        };

    login:
      | ((
          parent: undefined,
          args: ArgsLogin,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => AuthPayload | Promise<AuthPayload>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsLogin,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => AuthPayload | Promise<AuthPayload>;
        };

    createMessage:
      | ((
          parent: undefined,
          args: ArgsCreateMessage,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Message | Promise<Message>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreateMessage,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Message | Promise<Message>;
        };

    createHistory:
      | ((
          parent: undefined,
          args: ArgsCreateHistory,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => History | Promise<History>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreateHistory,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => History | Promise<History>;
        };

    deleteHistory:
      | ((
          parent: undefined,
          args: ArgsDeleteHistory,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => History | Promise<History>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsDeleteHistory,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => History | Promise<History>;
        };
  }
}

export namespace AuthPayloadResolvers {
  export const defaultResolvers = {
    token: (parent: AuthPayload) => parent.token,
    user: (parent: AuthPayload) => parent.user,
  };

  export type TokenResolver =
    | ((
        parent: AuthPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: AuthPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type UserResolver =
    | ((
        parent: AuthPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: AuthPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | Promise<User>;
      };

  export interface Type {
    token:
      | ((
          parent: AuthPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: AuthPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    user:
      | ((
          parent: AuthPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: AuthPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => User | Promise<User>;
        };
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  User: UserResolvers.Type;
  Post: PostResolvers.Type;
  History: HistoryResolvers.Type;
  Message: MessageResolvers.Type;
  Mutation: MutationResolvers.Type;
  AuthPayload: AuthPayloadResolvers.Type;
}

// @ts-ignore
declare module 'graphql-tools' {
  interface IResolvers extends Resolvers {}
}
