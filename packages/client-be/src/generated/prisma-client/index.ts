// Code generated by Prisma (prisma@1.26.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from 'graphql';
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model,
} from 'prisma-client-lib';
import { typeDefs } from './prisma-schema';

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  history: (where?: HistoryWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  patient: (where?: PatientWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any },
  ) => Promise<T>;

  /**
   * Queries
   */

  history: (where: HistoryWhereUniqueInput) => HistoryPromise;
  histories: (args?: {
    where?: HistoryWhereInput;
    orderBy?: HistoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<History>;
  historiesConnection: (args?: {
    where?: HistoryWhereInput;
    orderBy?: HistoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => HistoryConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessagePromise;
  messages: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageConnectionPromise;
  patient: (where: PatientWhereUniqueInput) => PatientPromise;
  patients: (args?: {
    where?: PatientWhereInput;
    orderBy?: PatientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Patient>;
  patientsConnection: (args?: {
    where?: PatientWhereInput;
    orderBy?: PatientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PatientConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createHistory: (data: HistoryCreateInput) => HistoryPromise;
  updateHistory: (args: {
    data: HistoryUpdateInput;
    where: HistoryWhereUniqueInput;
  }) => HistoryPromise;
  updateManyHistories: (args: {
    data: HistoryUpdateManyMutationInput;
    where?: HistoryWhereInput;
  }) => BatchPayloadPromise;
  upsertHistory: (args: {
    where: HistoryWhereUniqueInput;
    create: HistoryCreateInput;
    update: HistoryUpdateInput;
  }) => HistoryPromise;
  deleteHistory: (where: HistoryWhereUniqueInput) => HistoryPromise;
  deleteManyHistories: (where?: HistoryWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput;
    where: MessageWhereUniqueInput;
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput;
    where?: MessageWhereInput;
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput;
    create: MessageCreateInput;
    update: MessageUpdateInput;
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createPatient: (data: PatientCreateInput) => PatientPromise;
  updatePatient: (args: {
    data: PatientUpdateInput;
    where: PatientWhereUniqueInput;
  }) => PatientPromise;
  updateManyPatients: (args: {
    data: PatientUpdateManyMutationInput;
    where?: PatientWhereInput;
  }) => BatchPayloadPromise;
  upsertPatient: (args: {
    where: PatientWhereUniqueInput;
    create: PatientCreateInput;
    update: PatientUpdateInput;
  }) => PatientPromise;
  deletePatient: (where: PatientWhereUniqueInput) => PatientPromise;
  deleteManyPatients: (where?: PatientWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  history: (
    where?: HistorySubscriptionWhereInput,
  ) => HistorySubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput,
  ) => MessageSubscriptionPayloadSubscription;
  patient: (
    where?: PatientSubscriptionWhereInput,
  ) => PatientSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput,
  ) => PostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput,
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PostType = 'MEDICAL_RECORD' | 'FORUM_POST';

export type PostOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'published_ASC'
  | 'published_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'content_ASC'
  | 'content_DESC';

export type HistoryOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'content_ASC'
  | 'content_DESC';

export type MessageOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'content_ASC'
  | 'content_DESC';

export type PatientOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'species_ASC'
  | 'species_DESC'
  | 'breed_ASC'
  | 'breed_DESC'
  | 'sex_ASC'
  | 'sex_DESC'
  | 'dob_ASC'
  | 'dob_DESC'
  | 'weight_ASC'
  | 'weight_DESC';

export type UserOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type MutationType = 'CREATED' | 'UPDATED' | 'DELETED';

export interface PatientUpdateWithoutPostDataInput {
  species?: String;
  breed?: String;
  sex?: String;
  dob?: String;
  weight?: Float;
}

export type HistoryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface HistoryUpsertWithWhereUniqueWithoutPostInput {
  where: HistoryWhereUniqueInput;
  update: HistoryUpdateWithoutPostDataInput;
  create: HistoryCreateWithoutPostInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface MessageCreateManyWithoutPostInput {
  create?: MessageCreateWithoutPostInput[] | MessageCreateWithoutPostInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
}

export interface MessageCreateInput {
  author: UserCreateOneInput;
  post: PostCreateOneWithoutMessagesInput;
  content?: String;
}

export interface MessageCreateWithoutPostInput {
  author: UserCreateOneInput;
  content?: String;
}

export interface HistoryScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  AND?: HistoryScalarWhereInput[] | HistoryScalarWhereInput;
  OR?: HistoryScalarWhereInput[] | HistoryScalarWhereInput;
  NOT?: HistoryScalarWhereInput[] | HistoryScalarWhereInput;
}

export interface PostCreateOneWithoutHistoriesInput {
  create?: PostCreateWithoutHistoriesInput;
  connect?: PostWhereUniqueInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface PostCreateWithoutHistoriesInput {
  published?: Boolean;
  type?: PostType;
  title: String;
  content?: String;
  author: UserCreateOneWithoutPostsInput;
  patient?: PatientCreateOneWithoutPostInput;
  messages?: MessageCreateManyWithoutPostInput;
}

export interface PatientSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PatientWhereInput;
  AND?: PatientSubscriptionWhereInput[] | PatientSubscriptionWhereInput;
  OR?: PatientSubscriptionWhereInput[] | PatientSubscriptionWhereInput;
  NOT?: PatientSubscriptionWhereInput[] | PatientSubscriptionWhereInput;
}

export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface HistorySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: HistoryWhereInput;
  AND?: HistorySubscriptionWhereInput[] | HistorySubscriptionWhereInput;
  OR?: HistorySubscriptionWhereInput[] | HistorySubscriptionWhereInput;
  NOT?: HistorySubscriptionWhereInput[] | HistorySubscriptionWhereInput;
}

export interface UserCreateWithoutPostsInput {
  email: String;
  password: String;
  name?: String;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  password?: String;
  name?: String;
}

export interface HistoryUpdateInput {
  author?: UserUpdateOneRequiredInput;
  post?: PostUpdateOneRequiredWithoutHistoriesInput;
  title?: String;
  content?: String;
}

export interface PostUpdateManyMutationInput {
  published?: Boolean;
  type?: PostType;
  title?: String;
  content?: String;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface PostCreateInput {
  published?: Boolean;
  type?: PostType;
  title: String;
  content?: String;
  author: UserCreateOneWithoutPostsInput;
  patient?: PatientCreateOneWithoutPostInput;
  histories?: HistoryCreateManyWithoutPostInput;
  messages?: MessageCreateManyWithoutPostInput;
}

export interface UserUpdateDataInput {
  email?: String;
  password?: String;
  name?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
}

export interface PatientUpdateManyMutationInput {
  species?: String;
  breed?: String;
  sex?: String;
  dob?: String;
  weight?: Float;
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  set?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    | PostUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    | PostUpsertWithWhereUniqueWithoutAuthorInput;
  deleteMany?: PostScalarWhereInput[] | PostScalarWhereInput;
  updateMany?:
    | PostUpdateManyWithWhereNestedInput[]
    | PostUpdateManyWithWhereNestedInput;
}

export interface PostUpdateWithoutPatientDataInput {
  published?: Boolean;
  type?: PostType;
  title?: String;
  content?: String;
  author?: UserUpdateOneRequiredWithoutPostsInput;
  histories?: HistoryUpdateManyWithoutPostInput;
  messages?: MessageUpdateManyWithoutPostInput;
}

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutAuthorDataInput;
}

export interface PostUpdateOneRequiredWithoutPatientInput {
  create?: PostCreateWithoutPatientInput;
  update?: PostUpdateWithoutPatientDataInput;
  upsert?: PostUpsertWithoutPatientInput;
  connect?: PostWhereUniqueInput;
}

export interface PostUpdateWithoutAuthorDataInput {
  published?: Boolean;
  type?: PostType;
  title?: String;
  content?: String;
  patient?: PatientUpdateOneWithoutPostInput;
  histories?: HistoryUpdateManyWithoutPostInput;
  messages?: MessageUpdateManyWithoutPostInput;
}

export interface PostCreateWithoutPatientInput {
  published?: Boolean;
  type?: PostType;
  title: String;
  content?: String;
  author: UserCreateOneWithoutPostsInput;
  histories?: HistoryCreateManyWithoutPostInput;
  messages?: MessageCreateManyWithoutPostInput;
}

export interface PatientUpdateOneWithoutPostInput {
  create?: PatientCreateWithoutPostInput;
  update?: PatientUpdateWithoutPostDataInput;
  upsert?: PatientUpsertWithoutPostInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: PatientWhereUniqueInput;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PostCreateOneWithoutMessagesInput {
  create?: PostCreateWithoutMessagesInput;
  connect?: PostWhereUniqueInput;
}

export interface MessageUpdateManyMutationInput {
  content?: String;
}

export interface PatientUpsertWithoutPostInput {
  update: PatientUpdateWithoutPostDataInput;
  create: PatientCreateWithoutPostInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface HistoryUpdateManyWithoutPostInput {
  create?: HistoryCreateWithoutPostInput[] | HistoryCreateWithoutPostInput;
  delete?: HistoryWhereUniqueInput[] | HistoryWhereUniqueInput;
  connect?: HistoryWhereUniqueInput[] | HistoryWhereUniqueInput;
  set?: HistoryWhereUniqueInput[] | HistoryWhereUniqueInput;
  disconnect?: HistoryWhereUniqueInput[] | HistoryWhereUniqueInput;
  update?:
    | HistoryUpdateWithWhereUniqueWithoutPostInput[]
    | HistoryUpdateWithWhereUniqueWithoutPostInput;
  upsert?:
    | HistoryUpsertWithWhereUniqueWithoutPostInput[]
    | HistoryUpsertWithWhereUniqueWithoutPostInput;
  deleteMany?: HistoryScalarWhereInput[] | HistoryScalarWhereInput;
  updateMany?:
    | HistoryUpdateManyWithWhereNestedInput[]
    | HistoryUpdateManyWithWhereNestedInput;
}

export interface PostUpdateOneRequiredWithoutMessagesInput {
  create?: PostCreateWithoutMessagesInput;
  update?: PostUpdateWithoutMessagesDataInput;
  upsert?: PostUpsertWithoutMessagesInput;
  connect?: PostWhereUniqueInput;
}

export interface HistoryUpdateWithWhereUniqueWithoutPostInput {
  where: HistoryWhereUniqueInput;
  data: HistoryUpdateWithoutPostDataInput;
}

export interface PostCreateWithoutMessagesInput {
  published?: Boolean;
  type?: PostType;
  title: String;
  content?: String;
  author: UserCreateOneWithoutPostsInput;
  patient?: PatientCreateOneWithoutPostInput;
  histories?: HistoryCreateManyWithoutPostInput;
}

export interface HistoryUpdateWithoutPostDataInput {
  author?: UserUpdateOneRequiredInput;
  title?: String;
  content?: String;
}

export interface HistoryCreateInput {
  author: UserCreateOneInput;
  post: PostCreateOneWithoutHistoriesInput;
  title?: String;
  content?: String;
}

export interface PatientWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  post?: PostWhereInput;
  species?: String;
  species_not?: String;
  species_in?: String[] | String;
  species_not_in?: String[] | String;
  species_lt?: String;
  species_lte?: String;
  species_gt?: String;
  species_gte?: String;
  species_contains?: String;
  species_not_contains?: String;
  species_starts_with?: String;
  species_not_starts_with?: String;
  species_ends_with?: String;
  species_not_ends_with?: String;
  breed?: String;
  breed_not?: String;
  breed_in?: String[] | String;
  breed_not_in?: String[] | String;
  breed_lt?: String;
  breed_lte?: String;
  breed_gt?: String;
  breed_gte?: String;
  breed_contains?: String;
  breed_not_contains?: String;
  breed_starts_with?: String;
  breed_not_starts_with?: String;
  breed_ends_with?: String;
  breed_not_ends_with?: String;
  sex?: String;
  sex_not?: String;
  sex_in?: String[] | String;
  sex_not_in?: String[] | String;
  sex_lt?: String;
  sex_lte?: String;
  sex_gt?: String;
  sex_gte?: String;
  sex_contains?: String;
  sex_not_contains?: String;
  sex_starts_with?: String;
  sex_not_starts_with?: String;
  sex_ends_with?: String;
  sex_not_ends_with?: String;
  dob?: String;
  dob_not?: String;
  dob_in?: String[] | String;
  dob_not_in?: String[] | String;
  dob_lt?: String;
  dob_lte?: String;
  dob_gt?: String;
  dob_gte?: String;
  dob_contains?: String;
  dob_not_contains?: String;
  dob_starts_with?: String;
  dob_not_starts_with?: String;
  dob_ends_with?: String;
  dob_not_ends_with?: String;
  weight?: Float;
  weight_not?: Float;
  weight_in?: Float[] | Float;
  weight_not_in?: Float[] | Float;
  weight_lt?: Float;
  weight_lte?: Float;
  weight_gt?: Float;
  weight_gte?: Float;
  AND?: PatientWhereInput[] | PatientWhereInput;
  OR?: PatientWhereInput[] | PatientWhereInput;
  NOT?: PatientWhereInput[] | PatientWhereInput;
}

export interface UserCreateInput {
  email: String;
  password: String;
  name?: String;
  posts?: PostCreateManyWithoutAuthorInput;
}

export interface HistoryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  author?: UserWhereInput;
  post?: PostWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  AND?: HistoryWhereInput[] | HistoryWhereInput;
  OR?: HistoryWhereInput[] | HistoryWhereInput;
  NOT?: HistoryWhereInput[] | HistoryWhereInput;
}

export interface PostCreateWithoutAuthorInput {
  published?: Boolean;
  type?: PostType;
  title: String;
  content?: String;
  patient?: PatientCreateOneWithoutPostInput;
  histories?: HistoryCreateManyWithoutPostInput;
  messages?: MessageCreateManyWithoutPostInput;
}

export interface HistoryUpdateManyWithWhereNestedInput {
  where: HistoryScalarWhereInput;
  data: HistoryUpdateManyDataInput;
}

export interface PatientCreateWithoutPostInput {
  species?: String;
  breed?: String;
  sex?: String;
  dob?: String;
  weight?: Float;
}

export interface HistoryUpdateManyDataInput {
  title?: String;
  content?: String;
}

export interface HistoryCreateWithoutPostInput {
  author: UserCreateOneInput;
  title?: String;
  content?: String;
}

export interface MessageUpdateManyWithoutPostInput {
  create?: MessageCreateWithoutPostInput[] | MessageCreateWithoutPostInput;
  delete?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  set?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  disconnect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  update?:
    | MessageUpdateWithWhereUniqueWithoutPostInput[]
    | MessageUpdateWithWhereUniqueWithoutPostInput;
  upsert?:
    | MessageUpsertWithWhereUniqueWithoutPostInput[]
    | MessageUpsertWithWhereUniqueWithoutPostInput;
  deleteMany?: MessageScalarWhereInput[] | MessageScalarWhereInput;
  updateMany?:
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface MessageUpdateWithWhereUniqueWithoutPostInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutPostDataInput;
}

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  published?: Boolean;
  published_not?: Boolean;
  type?: PostType;
  type_not?: PostType;
  type_in?: PostType[] | PostType;
  type_not_in?: PostType[] | PostType;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  author?: UserWhereInput;
  patient?: PatientWhereInput;
  histories_every?: HistoryWhereInput;
  histories_some?: HistoryWhereInput;
  histories_none?: HistoryWhereInput;
  messages_every?: MessageWhereInput;
  messages_some?: MessageWhereInput;
  messages_none?: MessageWhereInput;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export interface MessageUpdateWithoutPostDataInput {
  author?: UserUpdateOneRequiredInput;
  content?: String;
}

export interface PostUpdateInput {
  published?: Boolean;
  type?: PostType;
  title?: String;
  content?: String;
  author?: UserUpdateOneRequiredWithoutPostsInput;
  patient?: PatientUpdateOneWithoutPostInput;
  histories?: HistoryUpdateManyWithoutPostInput;
  messages?: MessageUpdateManyWithoutPostInput;
}

export interface MessageUpsertWithWhereUniqueWithoutPostInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutPostDataInput;
  create: MessageCreateWithoutPostInput;
}

export interface PostUpsertWithoutPatientInput {
  update: PostUpdateWithoutPatientDataInput;
  create: PostCreateWithoutPatientInput;
}

export interface MessageScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  AND?: MessageScalarWhereInput[] | MessageScalarWhereInput;
  OR?: MessageScalarWhereInput[] | MessageScalarWhereInput;
  NOT?: MessageScalarWhereInput[] | MessageScalarWhereInput;
}

export interface PatientUpdateInput {
  post?: PostUpdateOneRequiredWithoutPatientInput;
  species?: String;
  breed?: String;
  sex?: String;
  dob?: String;
  weight?: Float;
}

export interface MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput;
  data: MessageUpdateManyDataInput;
}

export interface PatientCreateInput {
  post: PostCreateOneWithoutPatientInput;
  species?: String;
  breed?: String;
  sex?: String;
  dob?: String;
  weight?: Float;
}

export interface MessageUpdateManyDataInput {
  content?: String;
}

export interface PostUpdateWithoutMessagesDataInput {
  published?: Boolean;
  type?: PostType;
  title?: String;
  content?: String;
  author?: UserUpdateOneRequiredWithoutPostsInput;
  patient?: PatientUpdateOneWithoutPostInput;
  histories?: HistoryUpdateManyWithoutPostInput;
}

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutAuthorDataInput;
  create: PostCreateWithoutAuthorInput;
}

export interface PostCreateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface PostScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  published?: Boolean;
  published_not?: Boolean;
  type?: PostType;
  type_not?: PostType;
  type_in?: PostType[] | PostType;
  type_not_in?: PostType[] | PostType;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  AND?: PostScalarWhereInput[] | PostScalarWhereInput;
  OR?: PostScalarWhereInput[] | PostScalarWhereInput;
  NOT?: PostScalarWhereInput[] | PostScalarWhereInput;
}

export interface HistoryCreateManyWithoutPostInput {
  create?: HistoryCreateWithoutPostInput[] | HistoryCreateWithoutPostInput;
  connect?: HistoryWhereUniqueInput[] | HistoryWhereUniqueInput;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MessageWhereInput;
  AND?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
  OR?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
  NOT?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
}

export interface PostUpdateManyDataInput {
  published?: Boolean;
  type?: PostType;
  title?: String;
  content?: String;
}

export type MessageWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface PostCreateOneWithoutPatientInput {
  create?: PostCreateWithoutPatientInput;
  connect?: PostWhereUniqueInput;
}

export interface PostUpdateOneRequiredWithoutHistoriesInput {
  create?: PostCreateWithoutHistoriesInput;
  update?: PostUpdateWithoutHistoriesDataInput;
  upsert?: PostUpsertWithoutHistoriesInput;
  connect?: PostWhereUniqueInput;
}

export interface MessageUpdateInput {
  author?: UserUpdateOneRequiredInput;
  post?: PostUpdateOneRequiredWithoutMessagesInput;
  content?: String;
}

export interface PostUpdateWithoutHistoriesDataInput {
  published?: Boolean;
  type?: PostType;
  title?: String;
  content?: String;
  author?: UserUpdateOneRequiredWithoutPostsInput;
  patient?: PatientUpdateOneWithoutPostInput;
  messages?: MessageUpdateManyWithoutPostInput;
}

export interface PatientCreateOneWithoutPostInput {
  create?: PatientCreateWithoutPostInput;
  connect?: PatientWhereUniqueInput;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  update?: UserUpdateWithoutPostsDataInput;
  upsert?: UserUpsertWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateInput {
  email?: String;
  password?: String;
  name?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
}

export interface HistoryUpdateManyMutationInput {
  title?: String;
  content?: String;
}

export interface PostUpsertWithoutHistoriesInput {
  update: PostUpdateWithoutHistoriesDataInput;
  create: PostCreateWithoutHistoriesInput;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface UserUpdateWithoutPostsDataInput {
  email?: String;
  password?: String;
  name?: String;
}

export type PatientWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface MessageWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  author?: UserWhereInput;
  post?: PostWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  AND?: MessageWhereInput[] | MessageWhereInput;
  OR?: MessageWhereInput[] | MessageWhereInput;
  NOT?: MessageWhereInput[] | MessageWhereInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface PostUpsertWithoutMessagesInput {
  update: PostUpdateWithoutMessagesDataInput;
  create: PostCreateWithoutMessagesInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  name?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface PatientPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  species?: String;
  breed?: String;
  sex?: String;
  dob?: String;
  weight?: Float;
}

export interface PatientPreviousValuesPromise
  extends Promise<PatientPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  species: () => Promise<String>;
  breed: () => Promise<String>;
  sex: () => Promise<String>;
  dob: () => Promise<String>;
  weight: () => Promise<Float>;
}

export interface PatientPreviousValuesSubscription
  extends Promise<AsyncIterator<PatientPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  species: () => Promise<AsyncIterator<String>>;
  breed: () => Promise<AsyncIterator<String>>;
  sex: () => Promise<AsyncIterator<String>>;
  dob: () => Promise<AsyncIterator<String>>;
  weight: () => Promise<AsyncIterator<Float>>;
}

export interface AggregateHistory {
  count: Int;
}

export interface AggregateHistoryPromise
  extends Promise<AggregateHistory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHistorySubscription
  extends Promise<AsyncIterator<AggregateHistory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface HistoryEdge {
  node: History;
  cursor: String;
}

export interface HistoryEdgePromise extends Promise<HistoryEdge>, Fragmentable {
  node: <T = HistoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface HistoryEdgeSubscription
  extends Promise<AsyncIterator<HistoryEdge>>,
    Fragmentable {
  node: <T = HistorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface HistoryConnection {
  pageInfo: PageInfo;
  edges: HistoryEdge[];
}

export interface HistoryConnectionPromise
  extends Promise<HistoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HistoryEdge>>() => T;
  aggregate: <T = AggregateHistoryPromise>() => T;
}

export interface HistoryConnectionSubscription
  extends Promise<AsyncIterator<HistoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HistoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHistorySubscription>() => T;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Message {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  content?: String;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  author: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  content: () => Promise<String>;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  author: <T = UserSubscription>() => T;
  post: <T = PostSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PatientEdge {
  node: Patient;
  cursor: String;
}

export interface PatientEdgePromise extends Promise<PatientEdge>, Fragmentable {
  node: <T = PatientPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PatientEdgeSubscription
  extends Promise<AsyncIterator<PatientEdge>>,
    Fragmentable {
  node: <T = PatientSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface History {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title?: String;
  content?: String;
}

export interface HistoryPromise extends Promise<History>, Fragmentable {
  id: () => Promise<ID_Output>;
  author: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  content: () => Promise<String>;
}

export interface HistorySubscription
  extends Promise<AsyncIterator<History>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  author: <T = UserSubscription>() => T;
  post: <T = PostSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface PostPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  published: Boolean;
  type: PostType;
  title: String;
  content?: String;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  type: () => Promise<PostType>;
  title: () => Promise<String>;
  content: () => Promise<String>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  type: () => Promise<AsyncIterator<PostType>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface HistorySubscriptionPayload {
  mutation: MutationType;
  node: History;
  updatedFields: String[];
  previousValues: HistoryPreviousValues;
}

export interface HistorySubscriptionPayloadPromise
  extends Promise<HistorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HistoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HistoryPreviousValuesPromise>() => T;
}

export interface HistorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HistorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HistorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HistoryPreviousValuesSubscription>() => T;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface HistoryPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title?: String;
  content?: String;
}

export interface HistoryPreviousValuesPromise
  extends Promise<HistoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  content: () => Promise<String>;
}

export interface HistoryPreviousValuesSubscription
  extends Promise<AsyncIterator<HistoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Patient {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  species?: String;
  breed?: String;
  sex?: String;
  dob?: String;
  weight?: Float;
}

export interface PatientPromise extends Promise<Patient>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  post: <T = PostPromise>() => T;
  species: () => Promise<String>;
  breed: () => Promise<String>;
  sex: () => Promise<String>;
  dob: () => Promise<String>;
  weight: () => Promise<Float>;
}

export interface PatientSubscription
  extends Promise<AsyncIterator<Patient>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  post: <T = PostSubscription>() => T;
  species: () => Promise<AsyncIterator<String>>;
  breed: () => Promise<AsyncIterator<String>>;
  sex: () => Promise<AsyncIterator<String>>;
  dob: () => Promise<AsyncIterator<String>>;
  weight: () => Promise<AsyncIterator<Float>>;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PatientConnection {
  pageInfo: PageInfo;
  edges: PatientEdge[];
}

export interface PatientConnectionPromise
  extends Promise<PatientConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PatientEdge>>() => T;
  aggregate: <T = AggregatePatientPromise>() => T;
}

export interface PatientConnectionSubscription
  extends Promise<AsyncIterator<PatientConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PatientEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePatientSubscription>() => T;
}

export interface PatientSubscriptionPayload {
  mutation: MutationType;
  node: Patient;
  updatedFields: String[];
  previousValues: PatientPreviousValues;
}

export interface PatientSubscriptionPayloadPromise
  extends Promise<PatientSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PatientPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PatientPreviousValuesPromise>() => T;
}

export interface PatientSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PatientSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PatientSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PatientPreviousValuesSubscription>() => T;
}

export interface Post {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  published: Boolean;
  type: PostType;
  title: String;
  content?: String;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  type: () => Promise<PostType>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  author: <T = UserPromise>() => T;
  patient: <T = PatientPromise>() => T;
  histories: <T = FragmentableArray<History>>(args?: {
    where?: HistoryWhereInput;
    orderBy?: HistoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  type: () => Promise<AsyncIterator<PostType>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
  patient: <T = PatientSubscription>() => T;
  histories: <T = Promise<AsyncIterator<HistorySubscription>>>(args?: {
    where?: HistoryWhereInput;
    orderBy?: HistoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MessagePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  content?: String;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  content: () => Promise<String>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregatePatient {
  count: Int;
}

export interface AggregatePatientPromise
  extends Promise<AggregatePatient>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePatientSubscription
  extends Promise<AsyncIterator<AggregatePatient>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  name?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: 'History',
    embedded: false,
  },
  {
    name: 'Message',
    embedded: false,
  },
  {
    name: 'Patient',
    embedded: false,
  },
  {
    name: 'Post',
    embedded: false,
  },
  {
    name: 'PostType',
    embedded: false,
  },
  {
    name: 'User',
    embedded: false,
  },
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://eu1.prisma.sh/healthvet/client-be/dev`,
  secret: `appsecret321`,
});
export const prisma = new Prisma();
